#version 430 core

uniform int width;
uniform int height;
uniform int octaves;
uniform float bias;

readonly layout(r8, binding=1) uniform image2D seed;
writeonly layout(binding=0) uniform image2D writer;
layout (local_size_x = 16, local_size_y = 16) in;

// Converts an index to the corresponding texture coordinate
ivec2 convert(int n) {
	ivec2 result;
	result.y = int(n / width);
	result.x = int(mod(n, width));
	return result;
}

void main()
{
	int x = int(gl_GlobalInvocationID.x);
	int y = int(gl_GlobalInvocationID.y);

	float noise = 0.0;
	float scaleAcc = 0.0;
	float scale = 1.0;

	for (int o = 0; o < octaves; o++)
	{
		int pitch = width >> o;
		int sampleX1 = (x / pitch) * pitch;
		int sampleY1 = (y / pitch) * pitch;

		int sampleX2 = (sampleX1 + pitch) % width;
		int sampleY2 = (sampleY1 + pitch) % width;

		float blendX = float(x - sampleX1) / float(pitch);
		float blendY = float(y - sampleY1) / float(pitch);

		float seed1 = imageLoad(seed, convert(sampleY1 * width + sampleX1)).r;
		float seed2 = imageLoad(seed, convert(sampleY1 * width + sampleX2)).r;
		float seed3 = imageLoad(seed, convert(sampleY2 * width + sampleX1)).r;
		float seed4 = imageLoad(seed, convert(sampleY2 * width + sampleX2)).r;

		float sampleT = (1.0 - blendX) * seed1 + blendX * seed2;
		float sampleB = (1.0 - blendX) * seed3 + blendX * seed4;

		scaleAcc += scale;
		noise += (blendY * (sampleB - sampleT) + sampleT) * scale;
		scale = scale / bias;
	}

	// This will draw a checker pattern
//	if ((x % 64 < 32) && (y % 64 < 32)) {
//		imageStore(writer,ivec2(gl_GlobalInvocationID.xy), vec4(1,1,1,0)); 
//	} else if ((x % 64 > 32) && (y % 64 > 32)) {
//		imageStore(writer,ivec2(gl_GlobalInvocationID.xy), vec4(1,1,1,0));
//	} else {
//		imageStore(writer,ivec2(gl_GlobalInvocationID.xy), vec4(0,0,0,0));
//	}
	//noise = x % 64;

	imageStore(writer,ivec2(gl_GlobalInvocationID.xy), vec4(noise / scaleAcc,0,0,0));
	//imageStore(writer,ivec2(0, 511), vec4(1,0,0,0));

}